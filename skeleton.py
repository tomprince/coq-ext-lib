#!/usr/bin/python

import sys, os, re
import subprocess

COQDIR = sys.argv[1]

def fe_commit(branch):
	return "commit %s\n" % branch
def fe_committer(name, email, time):
	return "committer %s <%s> %s\n" % (name, email, time)
def fe_data(string):
	return "data %s\n%s\n" % (len(string), string)
def fe_merge(sha1):
	return "merge %s\n" % sha1
def fe_add_file(path, data, mode = 644):
	return "M %s inline %s\n" % (mode,path) + fe_data(data)

def build_stdlib_modules():
	files = []
	for path in open(os.path.join(COQDIR, "theories", "theories.itarget")):
		path = path.rstrip("\n").replace("otarget", "itarget")
		for file in open(os.path.join(COQDIR, "theories", path)):
			files += [[os.path.dirname(path)] + file.rstrip("\n")[:-3].split("/")]
	return files

def skeleton_module(module):
	lines = []
	lines.append("(* Autogenerated Skeleton *)\n")
	lines.append("Require Export %s.\n" % ".".join(["Coq"] + module))
	deps = subprocess.Popen(["coqdep", "-require", os.path.join(COQDIR,"theories",*module)+".v"], stdout=subprocess.PIPE)
	def parse_require(line):
		modules = line.rstrip(".\n").split(" ")
		assert(modules.pop(0) == "Require")
		port = modules.pop(0)
		return (port, [m.split(".") for m in modules])
	def rename_stdlib(module):
		if len(module) > 1 and not module[1].islower():
			module[0] = "ExtLib"
		return module
	for line in deps.stdout.readlines():
		port, modules = parse_require(line)
		modules = map(rename_stdlib, modules)
		lines.append("Require %s %s.\n" % (port, " ".join(map(".".join,modules))))
	lines.append("(* End Autogenerated Skeleton *)\n")
	return "".join(lines)

def coq_version():
	try:
		os.stat(os.path.join(COQDIR, "Makefile.stage2"))
		return "v8.3"
	except:
		return "trunk"
def coq_revision():
	if 0 != subprocess.call(["git", "diff", "--quiet", "--", "theories"], cwd = COQDIR):
		exit(1)
	deps = subprocess.Popen(["git", "log", "--date=raw", "--pretty=format:%ad\n%H\n%B", "-n1"], cwd = COQDIR, stdout=subprocess.PIPE)
	lines = deps.stdout.readlines()
	date = lines[0].rstrip("\n")
	sha1 = lines[1].rstrip("\n")
	svn = [m.group(1) for m in [re.match("git-svn-id:.*@([0-9]*) .*", s) for s in lines[2:]] if m]
	return (date, ("SVN", "r" + svn[0]) if svn else ("GIT", sha1))

version = coq_version()
date, revision = coq_revision()

modules = build_stdlib_modules()
print fe_commit("refs/heads/empty/%s" % version),
print fe_committer("Coq ExtLib", "extlib@coq.inria.org", date),
print fe_data("ExtLib skeleton import from %s revision %s." % revision),
print fe_merge("empty/%s^0" % version),
for module in modules:
	print fe_add_file("/".join(module)+".v", skeleton_module(module)),
print fe_add_file("Make.stdlib", "".join(["/".join(m) + ".v\n" for m in modules])),
print fe_add_file("states/MakeInitial.v", "".join(open(os.path.join(COQDIR, "states", "MakeInitial.v")))),
